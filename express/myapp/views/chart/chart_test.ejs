<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8"/>
<title>chartjs</title>
<script src="../libs/jquery-1.11.0.min.js"></script>
<script src="../libs/canvasjs.min.js"></script>
<script type="text/javascript">
/*
 *■利用までの手順
 	①canvasjs.min.jsをダウンロードする。(公式サイトからまたはCDN経由で)
 	②body要素内にグラフを表示するdivを記述。(id属性はChart関数の第一引数に一致。グラフ全体のサイズはこちらから行う。)
 	③グラフ表示を行うスクリプトを記述。(基本的には書式はどのグラフでも同様。option属性を追加することで表示を切り替える。)
 	④設定を施したchartインスタンスのrender関数を実行。
*/

//グラフのy軸は自動で設定される(要素の中で一番値が高いものを認識し、その値の繰り上がりの値を設定。)
//グラフの高は比率で表示しているので、値開きがある場合でも画面崩れはしない。
//グラフの種類：column doughnut line splineArea etc(typeの指定を左記から選択すれば、表示が切り替わります。デフォルトはcolumn)

var dataPoints = [];

$(function() {
	$.getJSON("../data/discussion_time.json", function(data) {
		for(var i in data) {
			dataPoints.push({label: data[i].name, y: data[i].time});
			
			//alert(data[i].id + data[i].name + data[i].time);
			//$("#output").append("<li>" + data[i].id + data[i].name + data[i].time  + "</li>");
			//alert(dataPoints[i].label);
		}
		
		$(function() {
			var chart = new CanvasJS.Chart("chartContainer", {
				title:{
				text: "社内会議の時間"
				},
				data: [              
				{	// Change type to "doughnut", "line", "splineArea", "bar" etc.
					type: "bar",
					//color: "darkgreen",
					dataPoints: dataPoints
				}
				]
			});
			chart.render();
		});
	});	
});
</script>
</head>
<body>
<div id="chartContainer" style="height: 500px; width: 100%;"></div>

<button id="button">表示</button>
	<ul id="output"></ul>
</body>
</html>